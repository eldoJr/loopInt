import { useState } from 'react';
import { Sparkles, Send, Wand2, Brain, Zap, MessageSquare, Loader2, CheckCircle, Copy, Download } from 'lucide-react';

interface GeneratedReportData {
  title: string;
  type: string;
  description: string;
  tags: string[];
  settings: {
    includeCharts: boolean;
    includeData: boolean;
    format: string;
    autoGenerate: boolean;
  };
}

interface AIGenerateReportProps {
  onApplyToForm?: (data: GeneratedReportData) => void;
}

const AIGenerateReport = ({ onApplyToForm }: AIGenerateReportProps) => {
  const [prompt, setPrompt] = useState('');
  // Removed unused isGenerating state
  const [generatedData, setGeneratedData] = useState<GeneratedReportData | null>(null);
  const [step, setStep] = useState(1);

  const suggestions = [
    {
      icon: Brain,
      title: 'Performance Analysis',
      description: 'Generate a comprehensive team performance report with metrics and insights',
      prompt: 'Create a monthly performance report analyzing team productivity, task completion rates, and project milestones'
    },
    {
      icon: Zap,
      title: 'Financial Overview',
      description: 'Create financial reports with budget analysis and revenue tracking',
      prompt: 'Generate a quarterly financial report including budget analysis, expenses, and revenue projections'
    },
    {
      icon: MessageSquare,
      title: 'Project Status',
      description: 'Build project status reports with timeline and milestone tracking',
      prompt: 'Create a project status report showing current progress, upcoming milestones, and potential risks'
    }
  ];

  const handleGenerate = async () => {
    if (!prompt.trim()) return;
    
    setStep(2);
    
    // Simulate AI generation
    setTimeout(() => {
      const mockData: GeneratedReportData = {
        title: 'AI-Generated Performance Report',
        type: 'analytics',
        description: 'Comprehensive analysis of team performance metrics, productivity trends, and actionable insights generated by AI.',
        tags: ['ai-generated', 'performance', 'analytics', 'automated'],
        settings: {
          includeCharts: true,
          includeData: true,
          format: 'pdf',
          autoGenerate: true
        }
      };
      
      setGeneratedData(mockData);
      setStep(3);
    }, 3000);
  };

  const handleApply = () => {
    if (generatedData && onApplyToForm) {
      onApplyToForm(generatedData);
    }
  };

  const handleSuggestionClick = (suggestion: typeof suggestions[0]) => {
    setPrompt(suggestion.prompt);
  };

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="flex items-center gap-3 mb-5">
        <div className="p-2 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-500/20 dark:to-blue-500/20 rounded-lg border border-purple-200 dark:border-purple-500/30">
          <Sparkles className="w-4 h-4 text-purple-600 dark:text-purple-400" />
        </div>
        <div>
          <h3 className="text-base font-semibold text-gray-900 dark:text-white">AI Report Generator</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400">Let AI create your report structure and content</p>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="flex items-center gap-3 mb-6">
        {[1, 2, 3].map((num) => (
          <div key={num} className="flex items-center">
            <div className={`w-7 h-7 rounded-full flex items-center justify-center text-sm font-medium transition-all ${
              step >= num 
                ? 'bg-gradient-to-r from-purple-500 to-blue-500 text-white' 
                : 'bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400'
            }`}>
              {step > num ? <CheckCircle className="w-4 h-4" /> : num}
            </div>
            {num < 3 && (
              <div className={`w-10 h-0.5 mx-2 transition-all ${
                step > num ? 'bg-gradient-to-r from-purple-500 to-blue-500' : 'bg-gray-200 dark:bg-gray-700'
              }`} />
            )}
          </div>
        ))}
      </div>

      {/* Content */}
      <div className="flex-1">
        {step === 1 && (
          <div className="space-y-6">
            {/* Suggestions */}
            <div className="space-y-2">
              <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Quick Suggestions</h4>
              {suggestions.map((suggestion, index) => {
                const IconComponent = suggestion.icon;
                return (
                  <button
                    key={index}
                    onClick={() => handleSuggestionClick(suggestion)}
                    className="w-full p-3 bg-white dark:bg-gray-800/30 hover:bg-gray-50 dark:hover:bg-gray-800/50 border border-gray-200 dark:border-gray-700/50 hover:border-gray-300 dark:hover:border-gray-600/50 rounded-lg transition-all text-left group"
                  >
                    <div className="flex items-start gap-2.5">
                      <div className="p-1.5 bg-gray-100 dark:bg-gray-700/50 group-hover:bg-purple-100 dark:group-hover:bg-purple-500/20 rounded-lg transition-all">
                        <IconComponent className="w-4 h-4 text-gray-600 dark:text-gray-400 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors" />
                      </div>
                      <div className="flex-1">
                        <h5 className="font-medium text-gray-900 dark:text-white group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors text-sm">
                          {suggestion.title}
                        </h5>
                        <p className="text-xs text-gray-600 dark:text-gray-400 mt-0.5">{suggestion.description}</p>
                      </div>
                    </div>
                  </button>
                );
              })}
            </div>

            {/* Custom Prompt */}
            <div className="space-y-2">
              <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">Or describe your report</h4>
              <div className="space-y-2">
                <textarea
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder="Describe what kind of report you want to generate..."
                  className="w-full h-24 bg-gray-50 dark:bg-gray-800/50 border border-gray-300 dark:border-gray-700/50 rounded-lg px-3 py-2 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/20 focus:border-purple-500 transition-all resize-none text-sm"
                />
                <div className="flex justify-end">
                  <button
                    onClick={handleGenerate}
                    disabled={!prompt.trim()}
                    className={`flex items-center gap-1.5 px-4 py-2 rounded-lg transition-all text-sm font-medium ${
                      prompt.trim()
                        ? 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white shadow-sm'
                        : 'bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'
                    }`}
                  >
                    <Send className="w-4 h-4" />
                    Generate
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="flex flex-col items-center justify-center py-8">
            <div className="relative mb-4">
              <div className="w-12 h-12 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-500/20 dark:to-blue-500/20 rounded-full flex items-center justify-center border border-purple-200 dark:border-purple-500/30">
                <Loader2 className="w-6 h-6 text-purple-600 dark:text-purple-400 animate-spin" />
              </div>
              <div className="absolute inset-0 bg-gradient-to-r from-purple-100/50 to-blue-100/50 dark:from-purple-500/10 dark:to-blue-500/10 rounded-full animate-pulse" />
            </div>
            <h4 className="text-base font-medium text-gray-900 dark:text-white mb-2">Generating Your Report</h4>
            <p className="text-gray-600 dark:text-gray-400 text-center max-w-sm text-sm">
              AI is analyzing your requirements and creating a comprehensive report structure...
            </p>
            <div className="mt-4 flex items-center gap-1.5">
              <div className="w-1.5 h-1.5 bg-purple-500 rounded-full animate-bounce" />
              <div className="w-1.5 h-1.5 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
              <div className="w-1.5 h-1.5 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
            </div>
          </div>
        )}

        {step === 3 && generatedData && (
          <div className="space-y-4">
            <div className="flex items-center gap-2 mb-3">
              <CheckCircle className="w-4 h-4 text-green-500 dark:text-green-400" />
              <h4 className="text-base font-medium text-gray-900 dark:text-white">Report Generated Successfully!</h4>
            </div>

            {/* Generated Content Preview */}
            <div className="bg-gray-50 dark:bg-gray-800/30 border border-gray-200 dark:border-gray-700/50 rounded-lg p-4 space-y-3">
              <div>
                <label className="text-sm font-medium text-gray-600 dark:text-gray-300">Title</label>
                <p className="text-gray-900 dark:text-white mt-0.5 text-sm">{generatedData.title}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-600 dark:text-gray-300">Type</label>
                <p className="text-blue-600 dark:text-blue-400 mt-0.5 capitalize text-sm">{generatedData.type}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-600 dark:text-gray-300">Description</label>
                <p className="text-gray-700 dark:text-gray-300 mt-0.5 text-sm">{generatedData.description}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-600 dark:text-gray-300">Tags</label>
                <div className="flex flex-wrap gap-1.5 mt-1">
                  {generatedData.tags.map((tag: string, index: number) => (
                    <span key={index} className="px-2 py-0.5 bg-purple-100 dark:bg-purple-500/20 text-purple-700 dark:text-purple-400 text-xs rounded border border-purple-200 dark:border-purple-500/30">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </div>

            {/* Actions */}
            <div className="flex items-center gap-2">
              <button
                onClick={handleApply}
                className="flex items-center gap-1.5 px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white rounded-lg transition-all shadow-sm font-medium text-sm"
              >
                <Wand2 className="w-4 h-4" />
                Apply to Form
              </button>
              <button className="flex items-center gap-1.5 px-3 py-2 bg-gray-100 dark:bg-gray-800/50 border border-gray-200 dark:border-gray-700/50 hover:bg-gray-200 dark:hover:bg-gray-700/50 text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white rounded-lg transition-all text-sm">
                <Copy className="w-4 h-4" />
                Copy
              </button>
              <button className="flex items-center gap-1.5 px-3 py-2 bg-gray-100 dark:bg-gray-800/50 border border-gray-200 dark:border-gray-700/50 hover:bg-gray-200 dark:hover:bg-gray-700/50 text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white rounded-lg transition-all text-sm">
                <Download className="w-4 h-4" />
                Export
              </button>
            </div>

            {/* Start Over */}
            <button
              onClick={() => {
                setStep(1);
                setPrompt('');
                setGeneratedData(null);
              }}
              className="text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors"
            >
              Generate another report
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

// Standalone component for direct use
const GenerateReport = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:via-black dark:to-gray-900 p-6">
      <div className="max-w-4xl mx-auto">
        <AIGenerateReport />
      </div>
    </div>
  );
};

export default AIGenerateReport;
export { GenerateReport };